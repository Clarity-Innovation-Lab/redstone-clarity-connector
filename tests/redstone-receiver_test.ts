import { Clarinet, Tx, Chain, Account, types, assertEquals, pricePackageToCV } from "./deps.ts";
import type { PricePackage, Block } from "./deps.ts";

// Unfortunately it is not straightforward to import "../src/stacks-redstone.ts"
// in Clarinet test files. Values are therefore generated by the helper scripts
// found in the ./scripts directory. The parameters used to generate the data
// is provided in comments.

const contractName = "redstone-receiver";

const trustedOraclePubkey = "0x035ca791fed34bf9e9d54c0ce4b9626e1382cf13daa46aa58b657389c24a751cc6";
const untrustedOraclePubkey = "0x03cd2cfdbd2ad9332828a7a13ef62cb999e063421c708e863a7ffed71fb61c88c9";

function setTrustedOracle(chain: Chain, senderAddress: string): Block {
	return chain.mineBlock([
		Tx.contractCall(contractName, "set-trusted-oracle", [trustedOraclePubkey, types.bool(true)], senderAddress),
	]);
}

Clarinet.test({
	name: "Contract owner can set trusted oracle",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;
		const block = setTrustedOracle(chain, deployer.address);
		const [receipt] = block.receipts;
		receipt.result.expectOk().expectBool(true);
		const trusted = chain.callReadOnlyFn(contractName, "is-trusted-oracle", [trustedOraclePubkey], deployer.address);
		const untrusted = chain.callReadOnlyFn(contractName, "is-trusted-oracle", [untrustedOraclePubkey], deployer.address);
		trusted.result.expectBool(true);
		untrusted.result.expectBool(false);
	},
});

Clarinet.test({
	name: "Anyone can submit price data signed by trusted oracles",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const [deployer, accountA] = ["deployer", "wallet_1"].map(who => accounts.get(who)!);

		setTrustedOracle(chain, deployer.address);

		const pricePackage: PricePackage = {
			timestamp: 1647332581,
			prices: [{ symbol: "STXUSD", value: 2.5 }]
		}

		const packageCV = pricePackageToCV(pricePackage);
		const signature = "0x80517fa7ea136fa54522338145ebcad95f0be7c4d7c43c522fff0f97686d7ffa581d422619ef2c2718471c31f1af6084a03571f93e3e3bde346cedd2ced71f9100";

		const block = chain.mineBlock([
			Tx.contractCall(contractName, "submit-price-data", [
				packageCV.timestamp,
				packageCV.prices,
				signature
			], accountA.address)
		]);
		const [receipt] = block.receipts;
		const [event] = receipt.events;
		receipt.result.expectOk().expectBool(true);
		const print = (event.contract_event.value as string).expectList()[0].expectTuple();
		assertEquals(types.list([types.tuple(print)]), packageCV.prices);
	},
});


