import { Clarinet, Tx, Chain, Account, types, shiftPriceValue, assertEquals } from "./deps.ts";
import type { PricePackage, Block } from "./deps.ts";

// Unfortunately it is not straightforward to import "../src/stacks-redstone.ts"
// in Clarinet test files. Values are therefore generated by the helper scripts
// found in the ./scripts directory. The parameters used to generate the data
// is provided in comments.

// TODO: stale data test.

const contractName = "usd-nft";
const tokenPriceInUSD = 10000000; // 10 USD

const errors = {
	untrustedOracle: 101
};

const assetId = (deployer: Account) => `${deployer.address}.${contractName}::usd-nft`;

Clarinet.test({
	name: "Mint takes STX equivalent USD price",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const [deployer, accountA] = ["deployer", "wallet_1"].map(who => accounts.get(who)!);
		const stxusdRate = 2.5;

		const pricePackage: PricePackage = {
			timestamp: 1647332581,
			prices: [{ symbol: "STXUSD", value: stxusdRate }]
		}

		const signature = "0x80517fa7ea136fa54522338145ebcad95f0be7c4d7c43c522fff0f97686d7ffa581d422619ef2c2718471c31f1af6084a03571f93e3e3bde346cedd2ced71f9100";

		const block = chain.mineBlock([
			Tx.contractCall(contractName, "mint", [
				types.uint(pricePackage.timestamp),
				types.uint(shiftPriceValue(pricePackage.prices[0].value)),
				signature
			], accountA.address)
		]);
		const [receipt] = block.receipts;
		const tokenId = receipt.result.expectOk();
		tokenId.expectUint(1);
		receipt.events.expectSTXTransferEvent(~~(tokenPriceInUSD / stxusdRate), accountA.address, deployer.address);
		receipt.events.expectNonFungibleTokenMintEvent(tokenId, accountA.address, `${deployer.address}.${contractName}`, "usd-nft");
	},
});

Clarinet.test({
	name: "Mint cost in STX can change over time.",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const [deployer, accountA] = ["deployer", "wallet_1"].map(who => accounts.get(who)!);
		const stxusdRateOlder = 2.5;
		const stxusdRateNewer = 2.3;

		const pricePackageOlder: PricePackage = {
			timestamp: 1647332581,
			prices: [{ symbol: "STXUSD", value: stxusdRateOlder }]
		}

		const pricePackageNewer: PricePackage = {
			timestamp: 1647342581,
			prices: [{ symbol: "STXUSD", value: stxusdRateNewer }]
		}

		const signatureOlder = "0x80517fa7ea136fa54522338145ebcad95f0be7c4d7c43c522fff0f97686d7ffa581d422619ef2c2718471c31f1af6084a03571f93e3e3bde346cedd2ced71f9100";
		const signatureNewer = "0x6023f621dc34eeb2111bd7286029ccb8065d09fda97519a12b8676c5cd472bae00f36560eab29fd832441bcaa51532e5a589eb3704981f8c87a0aadbad7aa1d100";

		chain.mineBlock([
			Tx.contractCall(contractName, "mint", [
				types.uint(pricePackageOlder.timestamp),
				types.uint(shiftPriceValue(pricePackageOlder.prices[0].value)),
				signatureOlder
			], accountA.address)
		]);

		const block = chain.mineBlock([
			Tx.contractCall(contractName, "mint", [
				types.uint(pricePackageNewer.timestamp),
				types.uint(shiftPriceValue(pricePackageNewer.prices[0].value)),
				signatureNewer
			], accountA.address)
		]);
		const [receipt] = block.receipts;
		const tokenId = receipt.result.expectOk();
		tokenId.expectUint(2);
		receipt.events.expectSTXTransferEvent(~~(tokenPriceInUSD / stxusdRateNewer), accountA.address, deployer.address);
		receipt.events.expectNonFungibleTokenMintEvent(tokenId, accountA.address, `${deployer.address}.${contractName}`, "usd-nft");
	},
});

Clarinet.test({
	name: "Mint always uses the last seen exchange rate.",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const [deployer, accountA] = ["deployer", "wallet_1"].map(who => accounts.get(who)!);
		const stxusdRateOlder = 2.5;
		const stxusdRateNewer = 2.3;

		const pricePackageOlder: PricePackage = {
			timestamp: 1647332581,
			prices: [{ symbol: "STXUSD", value: stxusdRateOlder }]
		}

		const pricePackageNewer: PricePackage = {
			timestamp: 1647342581,
			prices: [{ symbol: "STXUSD", value: stxusdRateNewer }]
		}

		const signatureOlder = "0x80517fa7ea136fa54522338145ebcad95f0be7c4d7c43c522fff0f97686d7ffa581d422619ef2c2718471c31f1af6084a03571f93e3e3bde346cedd2ced71f9100";
		const signatureNewer = "0x6023f621dc34eeb2111bd7286029ccb8065d09fda97519a12b8676c5cd472bae00f36560eab29fd832441bcaa51532e5a589eb3704981f8c87a0aadbad7aa1d100";

		// Submit the newer price package first.
		chain.mineBlock([
			Tx.contractCall(contractName, "mint", [
				types.uint(pricePackageNewer.timestamp),
				types.uint(shiftPriceValue(pricePackageNewer.prices[0].value)),
				signatureNewer
			], accountA.address)
		]);

		// Then submit the older one.
		const block = chain.mineBlock([
			Tx.contractCall(contractName, "mint", [
				types.uint(pricePackageOlder.timestamp),
				types.uint(shiftPriceValue(pricePackageOlder.prices[0].value)),
				signatureOlder
			], accountA.address)
		]);
		const [receipt] = block.receipts;
		const tokenId = receipt.result.expectOk();
		tokenId.expectUint(2);
		receipt.events.expectSTXTransferEvent(~~(tokenPriceInUSD / stxusdRateNewer), accountA.address, deployer.address);
		receipt.events.expectNonFungibleTokenMintEvent(tokenId, accountA.address, `${deployer.address}.${contractName}`, "usd-nft");
	},
});

Clarinet.test({
	name: "Does not mint if the data or signature is invalid.",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const accountA = accounts.get("wallet_1")!;
		const stxusdRate = 0.1;

		const pricePackage: PricePackage = {
			timestamp: 1647332581,
			prices: [{ symbol: "STXUSD", value: stxusdRate }]
		}

		const signature = "0x80517fa7ea136fa54522338145ebcad95f0be7c4d7c43c522fff0f97686d7ffa581d422619ef2c2718471c31f1af6084a03571f93e3e3bde346cedd2ced71f9100";

		const block = chain.mineBlock([
			Tx.contractCall(contractName, "mint", [
				types.uint(pricePackage.timestamp),
				types.uint(shiftPriceValue(pricePackage.prices[0].value)),
				signature
			], accountA.address)
		]);
		const [receipt] = block.receipts;
		receipt.result.expectErr().expectUint(errors.untrustedOracle);
		assertEquals(receipt.events.length, 0);
	},
});