import { Clarinet, Chain, Account, types, assertEquals, pricePackageToCV } from "./deps.ts";
import type { PricePackage } from "./deps.ts";

// Unfortunately it is not straightforward to import "../src/stacks-redstone.ts"
// in Clarinet test files. Values are therefore generated by the helper scripts
// found in the ./scripts directory. The parameters used to generate the data
// is provided in comments.

const contractName = "redstone-verify";

Clarinet.test({
	name: "#shift-timestamp ceils timestamps",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;
		const equal = chain.callReadOnlyFn(contractName, "shift-timestamp", [types.uint(8000)], deployer.address);
		equal.result.expectUint(8);
		const up = chain.callReadOnlyFn(contractName, "shift-timestamp", [types.uint(9001)], deployer.address);
		up.result.expectUint(10);
	},
});

Clarinet.test({
	name: "#get-redstone-value-shift returns 10 ** 8",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;
		const equal = chain.callReadOnlyFn(contractName, "get-redstone-value-shift", [], deployer.address);
		equal.result.expectUint(100000000);
	},
});

Clarinet.test({
	name: "#generate-lite-data-bytes turns PricePackage into expected byte string",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;

		const pricePackage: PricePackage = {
			timestamp: 11223344,
			prices: [{ symbol: "STXBTC", value: 1234 }, { symbol: "STXUSD", value: 4567 }]
		}
		const packageCV = pricePackageToCV(pricePackage);

		const response = chain.callReadOnlyFn(contractName, "generate-lite-data-bytes", [packageCV.timestamp, packageCV.prices], deployer.address);
		assertEquals(response.result, "0x53545842544300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001cbb36920053545855534400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006a5570f7000000000000000000000000000000000000000000000000000000000000002bd8");
	},
});

Clarinet.test({
	name: "#generate-signable-message-hash turns PricePackage into expected keccak256 hash (lite signature)",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;

		const pricePackage: PricePackage = {
			timestamp: 11223344,
			prices: [{ symbol: "STXBTC", value: 1234 }, { symbol: "STXUSD", value: 4567 }]
		}
		const packageCV = pricePackageToCV(pricePackage);

		const response = chain.callReadOnlyFn(contractName, "generate-signable-message-hash", [packageCV.timestamp, packageCV.prices], deployer.address);
		assertEquals(response.result, "0xa682ee2780e08707db17f34ba897f56bb1411c8196552b137144d2c90cf8a577");
	},
});

Clarinet.test({
	name: "#verify-message checks if a PricePackage was signed by a specific public key",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;

		const pricePackage: PricePackage = {
			timestamp: 11223344,
			prices: [{ symbol: "STXBTC", value: 1234 }, { symbol: "STXUSD", value: 4567 }]
		}
		const packageCV = pricePackageToCV(pricePackage);
		const signature = "0x9d94402960c3b46f436350a204142d9f208fd921c20881e85610cda3b22a55082a57a69f877ba45869da9d76d23c421c9e924c7fdae09b4ff0713bc5c1953a8401";
		const publicKey = "0x035ca791fed34bf9e9d54c0ce4b9626e1382cf13daa46aa58b657389c24a751cc6";

		const response = chain.callReadOnlyFn(contractName, "verify-message", [packageCV.timestamp, packageCV.prices, signature, publicKey], deployer.address);
		response.result.expectBool(true);
	},
});

Clarinet.test({
	name: "#verify-message fails for invalid signatures & messages.",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;

		const pricePackage: PricePackage = {
			timestamp: 11223344,
			prices: [{ symbol: "STXBTC", value: 1234 }, { symbol: "STXUSD", value: 0 }] // Valid value is 4567
		}
		const packageCV = pricePackageToCV(pricePackage);
		const signature = "0x9d94402960c3b46f436350a204142d9f208fd921c20881e85610cda3b22a55082a57a69f877ba45869da9d76d23c421c9e924c7fdae09b4ff0713bc5c1953a8401";
		const publicKey = "0x035ca791fed34bf9e9d54c0ce4b9626e1382cf13daa46aa58b657389c24a751cc6";

		const response = chain.callReadOnlyFn(contractName, "verify-message", [packageCV.timestamp, packageCV.prices, signature, publicKey], deployer.address);
		response.result.expectBool(false);
	},
});

Clarinet.test({
	name: "#recover-signer recovers the public key of the signer of a signed PricePackage",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;

		const pricePackage: PricePackage = {
			timestamp: 11223344,
			prices: [{ symbol: "STXBTC", value: 1234 }, { symbol: "STXUSD", value: 4567 }]
		}
		const packageCV = pricePackageToCV(pricePackage);
		const signature = "0x9d94402960c3b46f436350a204142d9f208fd921c20881e85610cda3b22a55082a57a69f877ba45869da9d76d23c421c9e924c7fdae09b4ff0713bc5c1953a8401";
		const publicKey = "0x035ca791fed34bf9e9d54c0ce4b9626e1382cf13daa46aa58b657389c24a751cc6";

		const response = chain.callReadOnlyFn(contractName, "recover-signer", [packageCV.timestamp, packageCV.prices, signature], deployer.address);
		assertEquals(response.result.expectOk(), publicKey);
	},
});

Clarinet.test({
	name: "#recover-signer-multi recovers multiple public keys of the same signed PricePackage (up to 8)",
	async fn(chain: Chain, accounts: Map<string, Account>) {
		const deployer = accounts.get("deployer")!;

		const pricePackage: PricePackage = {
			timestamp: 11223344,
			prices: [{ symbol: "STXBTC", value: 1234 }, { symbol: "STXUSD", value: 4567 }]
		}
		const packageCV = pricePackageToCV(pricePackage);
		const signature = "0x9d94402960c3b46f436350a204142d9f208fd921c20881e85610cda3b22a55082a57a69f877ba45869da9d76d23c421c9e924c7fdae09b4ff0713bc5c1953a8401";
		const publicKey = "0x035ca791fed34bf9e9d54c0ce4b9626e1382cf13daa46aa58b657389c24a751cc6";

		const response = chain.callReadOnlyFn(contractName, "recover-signer-multi", [packageCV.timestamp, packageCV.prices, types.list(Array(8).fill(signature))], deployer.address);
		const list = response.result.expectList();
		list.forEach(currentKey => assertEquals(currentKey.expectOk(), publicKey));
	},
});